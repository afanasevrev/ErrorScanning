package com.example.ErrorScanning.controller;

import com.example.ErrorScanning.db.VulnerabilityEntity;
import com.example.ErrorScanning.db.VulnerabilityService;
import com.example.ErrorScanning.vulnerabilityscan.VulnerabilityScanResult;
import com.example.ErrorScanning.vulnerabilityscan.VulnerabilityScannerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/scanner")
public class VulnerabilityScannerController {
    @Autowired
    private VulnerabilityService vulnerabilityService;
    @Autowired
    private VulnerabilityScannerService scannerService;
    /**
     * Эндпоинт для запуска сканирования указанного URL на уязвимости.
     * Пример запроса: /scanner/scan?targetUrl=http://example.com/vulnerable-endpoint
     */
    @GetMapping(value = "/scan")
    public VulnerabilityScanResult[] scanVulnerabilities(@RequestParam String targetUrl) {
        VulnerabilityScanResult xssResult = scannerService.scanForXSS(targetUrl);
        VulnerabilityScanResult csrfResult = scannerService.scanForCSRF(targetUrl);
        VulnerabilityScanResult xxeResult = scannerService.scanForXXE(targetUrl);

        //Перед выводом ответа, данные записываем в БД
        vulnerabilityService.createVulnerability(new VulnerabilityEntity(xssResult.getVulnerabilityType(), xssResult.isVulnerable(), xssResult.getDetails()));
        vulnerabilityService.createVulnerability(new VulnerabilityEntity(csrfResult.getVulnerabilityType(), csrfResult.isVulnerable(), csrfResult.getDetails()));
        vulnerabilityService.createVulnerability(new VulnerabilityEntity(xxeResult.getVulnerabilityType(), xxeResult.isVulnerable(), xxeResult.getDetails()));

        return new VulnerabilityScanResult[]{xssResult, csrfResult, xxeResult};
    }
}
